import streamlit as st
import pandas as pd
import plotly.express as px

# Configura√ß√µes iniciais
st.set_page_config(
    page_title="Analisador de Vendas",
    page_icon="üìä",
    layout="wide"
)

# Barra lateral
st.sidebar.markdown('Desenvolvido por [Bruno Almeida](https://www.linkedin.com/in/brunodesouzaalmeida/)')
st.sidebar.header('Op√ß√µes')

# Carregar dados
def carregar_dados():
    uploaded_file = st.sidebar.file_uploader("Escolha um arquivo CSV", type="csv")
    if uploaded_file is not None:
        data = pd.read_csv(uploaded_file)
        st.session_state['data'] = data
        st.success("Dados carregados com sucesso!")
    else:
        st.info("Por favor, fa√ßa o upload de um arquivo CSV.")
    return st.session_state.get('data')

# Visualiza√ß√£o de dados
def visualizar_dados(data):
    st.markdown("## Visualiza√ß√£o de Dados")
    st.dataframe(data)
    st.markdown("### Estat√≠sticas Descritivas")
    st.write(data.describe())

# Gr√°ficos
def gerar_graficos(data):
    st.markdown("## Gr√°ficos Interativos")
    fig1 = px.histogram(data, x='vendas', nbins=50, title='Distribui√ß√£o de Vendas')
    st.plotly_chart(fig1, use_container_width=True)

    fig2 = px.box(data, y='vendas', title='Boxplot das Vendas')
    st.plotly_chart(fig2, use_container_width=True)

# T√≠tulo principal
st.markdown('# Bem-vindo ao Analisador de Vendas')

# Divisor
st.divider()

# Introdu√ß√£o
st.markdown(
    '''
    Esse projeto foi desenvolvido como projeto final do curso ***Python para Usu√°rios de Excel***.

    Utilizaremos tr√™s principais bibliotecas para o seu desenvolvimento:

    - `pandas`: para manipula√ß√£o de dados em tabelas
    - `plotly`: para gera√ß√£o de gr√°ficos
    - `streamlit`: para cria√ß√£o desse webApp interativo que voc√™ se encontra nesse momento

    Os dados utilizados foram gerados pelo script 'gerador_de_vendas.py' que se encontra junto do c√≥digo fonte do projeto. Os dados podem ser visualizados na aba de tabelas!
    '''
)

# Divisor
st.divider()

# Carregar dados
data = carregar_dados()

# Se os dados foram carregados, exibir visualiza√ß√£o e gr√°ficos
if data is not None:
    visualizar_dados(data)
    gerar_graficos(data)
